{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\GitHub\\\\EnglishWeb\\\\EnglishWeb\\\\src\\\\webapp\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\GitHub\\\\EnglishWeb\\\\EnglishWeb\\\\src\\\\webapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\GitHub\\\\EnglishWeb\\\\EnglishWeb\\\\src\\\\webapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\GitHub\\\\EnglishWeb\\\\EnglishWeb\\\\src\\\\webapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\GitHub\\\\EnglishWeb\\\\EnglishWeb\\\\src\\\\webapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\GitHub\\\\EnglishWeb\\\\EnglishWeb\\\\src\\\\webapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\GitHub\\\\EnglishWeb\\\\EnglishWeb\\\\src\\\\webapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\GitHub\\\\EnglishWeb\\\\EnglishWeb\\\\src\\\\webapp\\\\src\\\\components\\\\Vocabulary\\\\vocabulary.component.js\";\nimport React, { Component } from \"react\";\nimport \"./vocabulary.css\";\n\nvar Vocabulary =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Vocabulary, _Component);\n\n  function Vocabulary(props) {\n    var _this;\n\n    _classCallCheck(this, Vocabulary);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Vocabulary).call(this, props));\n\n    _this.getVocabularyByTopicId =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(id) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"vocabulary/get-vocabularies-by-topic-id/\" + id).then(function (response) {\n                  return response.json();\n                }).then(function (data) {\n                  return _this.setListVocabulary(data);\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.setListVocabulary = function (data) {\n      var topicName = data[0].topicName;\n\n      _this.setState({\n        listVocabulary: data,\n        topicName: topicName\n      });\n    };\n\n    _this.state = {\n      listVocabulary: [],\n      topicName: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Vocabulary, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getVocabularyByTopicId(\"1\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var elmVoca = this.state.listVocabulary.map(function (voc, index) {\n        return React.createElement(\"div\", {\n          className: \" col-3 p-3 vocabulary-card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"card\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          className: \"card-img-top\",\n          src: \"/images/Vocabulary/\" + _this2.state.topicName + \"/\" + voc.word + \".png\",\n          alt: voc.word,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"card-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          className: \"card-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, voc.word), React.createElement(\"p\", {\n          className: \"card-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, voc.meaning))));\n      });\n      console.log(elmVoca);\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"selectedTopic\",\n        align: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"topic1\")), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Selected Topic\"), React.createElement(\"div\", {\n        className: \"container-fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, elmVoca)));\n    }\n  }]);\n\n  return Vocabulary;\n}(Component);\n\nexport default Vocabulary;","map":{"version":3,"sources":["D:\\GitHub\\EnglishWeb\\EnglishWeb\\src\\webapp\\src\\components\\Vocabulary\\vocabulary.component.js"],"names":["React","Component","Vocabulary","props","getVocabularyByTopicId","id","fetch","then","response","json","data","setListVocabulary","topicName","setState","listVocabulary","state","elmVoca","map","voc","index","word","meaning","console","log"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport \"./vocabulary.css\";\r\n\r\nclass Vocabulary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            listVocabulary: [],\r\n            topicName: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getVocabularyByTopicId(\"1\");\r\n    }\r\n\r\n    getVocabularyByTopicId = async id => {\r\n        await fetch(\"vocabulary/get-vocabularies-by-topic-id/\" + id)\r\n            .then(response => response.json())\r\n            .then(data => this.setListVocabulary(data));\r\n    };\r\n\r\n    setListVocabulary = (data) => {\r\n\r\n        let topicName = data[0].topicName;\r\n\r\n        this.setState({listVocabulary: data, topicName: topicName});\r\n    }\r\n\r\n    render() {\r\n\r\n        var elmVoca = this\r\n            .state\r\n            .listVocabulary\r\n            .map((voc, index) => {\r\n                return (\r\n                    <div className=\" col-3 p-3 vocabulary-card\">\r\n\r\n                        <div className=\"card\" key={index}>\r\n                            <img\r\n                                className=\"card-img-top\"\r\n                                src={\"/images/Vocabulary/\" + this.state.topicName +\"/\" + voc.word + \".png\"}\r\n                                alt={voc.word}/>\r\n\r\n                            <div className=\"card-body\">\r\n                                <h5 className=\"card-title\">{voc.word}</h5>\r\n                                <p className=\"card-text\">\r\n                                    {voc.meaning}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            });\r\n\r\n        console.log(elmVoca);\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <br/>\r\n\r\n                <div className=\"selectedTopic\" align=\"center\">\r\n                    <button>topic1</button>\r\n                </div>\r\n                <hr/>\r\n                <h3>Selected Topic</h3>\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        {elmVoca}\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Vocabulary;\r\n"]},"metadata":{},"sourceType":"module"}